
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('../config/database');

const JWT_SECRET = process.env.JWT_SECRET || 'vertttraue_secret_key_2024';

// Login de usu√°rio
const login = async (req, res) => {
  try {
    const { username, password } = req.body;
    
    console.log('üîê === IN√çCIO DO LOGIN ===');
    console.log('üì• Dados recebidos:', { username, password: password ? '***' : 'undefined' });

    if (!username || !password) {
      console.log('‚ùå Dados incompletos');
      return res.status(400).json({ error: 'Usu√°rio e senha s√£o obrigat√≥rios' });
    }

    console.log('üîç Buscando usu√°rio no banco de dados...');
    
    // Buscar usu√°rio no banco
    const userResult = await pool.query(
      'SELECT * FROM usuarios_admin WHERE username = $1',
      [username]
    );

    console.log(`üìä Resultado da busca: ${userResult.rows.length} usu√°rios encontrados`);

    if (userResult.rows.length === 0) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', username);
      
      // Vamos tamb√©m tentar buscar todos os usu√°rios para debug
      const allUsers = await pool.query('SELECT username FROM usuarios_admin');
      console.log('üìã Usu√°rios existentes no banco:', allUsers.rows.map(u => u.username));
      
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }

    const user = userResult.rows[0];
    console.log('‚úÖ Usu√°rio encontrado:', { 
      id: user.id, 
      username: user.username,
      password_hash_exists: !!user.password_hash,
      password_hash_length: user.password_hash ? user.password_hash.length : 0
    });

    // Verificar senha
    console.log('üîë Verificando senha...');
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    console.log('üîë Senha v√°lida:', isValidPassword);

    if (!isValidPassword) {
      console.log('‚ùå Senha inv√°lida para usu√°rio:', username);
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }

    // Gerar token JWT
    console.log('üéüÔ∏è Gerando token JWT...');
    const token = jwt.sign(
      { id: user.id, username: user.username }, 
      JWT_SECRET, 
      { expiresIn: '24h' }
    );

    console.log('‚úÖ === LOGIN BEM-SUCEDIDO ===');
    console.log('üéüÔ∏è Token gerado:', token.substring(0, 20) + '...');

    const response = {
      message: 'Login realizado com sucesso',
      token,
      user: {
        id: user.id,
        username: user.username,
        nome: user.username
      }
    };

    console.log('üì§ Resposta enviada:', { ...response, token: token.substring(0, 20) + '...' });

    res.json(response);
    
  } catch (error) {
    console.error('‚ùå === ERRO NO LOGIN ===');
    console.error('Stack trace:', error.stack);
    console.error('Erro completo:', error);
    res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
  }
};

// Verificar token
const verifyToken = async (req, res) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  console.log('üîç Verificando token:', token ? token.substring(0, 20) + '...' : 'n√£o fornecido');

  if (!token) {
    return res.status(401).json({ error: 'Token n√£o fornecido' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('‚úÖ Token v√°lido:', decoded);
    res.json({ valid: true, user: decoded });
  } catch (error) {
    console.error('‚ùå Token inv√°lido:', error.message);
    res.status(401).json({ error: 'Token inv√°lido' });
  }
};

// Registrar novo usu√°rio (apenas para desenvolvimento)
const register = async (req, res) => {
  try {
    const { username, password, nome } = req.body;

    console.log('üìù Tentativa de registro:', { username, nome });

    if (!username || !password) {
      return res.status(400).json({ error: 'Username e senha s√£o obrigat√≥rios' });
    }

    // Verificar se usu√°rio j√° existe
    const existingUser = await pool.query(
      'SELECT id FROM usuarios_admin WHERE username = $1',
      [username]
    );

    if (existingUser.rows.length > 0) {
      console.log('‚ùå Usu√°rio j√° existe:', username);
      return res.status(400).json({ error: 'Usu√°rio j√° existe' });
    }

    // Hash da senha
    console.log('üîí Gerando hash da senha...');
    const passwordHash = await bcrypt.hash(password, 10);

    // Inserir usu√°rio
    const result = await pool.query(
      'INSERT INTO usuarios_admin (username, password_hash) VALUES ($1, $2) RETURNING id, username',
      [username, passwordHash]
    );

    console.log('‚úÖ Usu√°rio criado:', result.rows[0]);

    res.status(201).json({
      message: 'Usu√°rio criado com sucesso',
      user: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Erro ao registrar usu√°rio:', error);
    res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
  }
};

module.exports = {
  login,
  verifyToken,
  register
};
